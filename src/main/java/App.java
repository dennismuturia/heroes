/*
 * This Java source file was generated by the Gradle 'init' task.
 */
 import java.util.HashMap;
 import java.util.Map;
 import spark.ModelAndView;
 import spark.template.velocity.VelocityTemplateEngine;
 import static spark.Spark.*;
 import java.util.ArrayList;

public class App {
  public static void main(String[] args) {
    staticFileLocation("/public");
    String layout = "templates/layout.vtl";

    get("/", (request, response) -> {
      Map<String, Object> model = new HashMap<String, Object>();
      model.put("heroes",request.session().attribute("heroes"));
      model.put("template", "templates/index.vtl");
      return new ModelAndView(model, layout);
    },new VelocityTemplateEngine());

    get("heroes/new", (request, response) -> {
      Map<String, Object> model = new HashMap<String, Object>();
      model.put("template", "templates/heroesform.vtl");
      return new ModelAndView(model, layout);
    }, new VelocityTemplateEngine());

    post("/heroes", (request, response) -> {
      Map<String, Object> model = new HashMap<String, Object>();
      ArrayList<Heros> heroes = request.session().attribute("heroes");
      if(heroes == null){
        heroes = new ArrayList<Heros>();
        request.session().attribute("heroes", heroes);
      }
      String heroName = request.queryParams("name");

      Heros myHero = new Heros(heroName);
      heroes.add(myHero);
      model.put("template", "templates/success.vtl");

      return new ModelAndView(model, layout);
    }, new VelocityTemplateEngine());

    get("/heroes", (request, response) -> {
      Map<String, Object> model = new HashMap<String, Object>();
      model.put("heroes", Heros.all());
      model.put("template", "templates/heroes.vtl");
      return new ModelAndView(model, layout);
    }, new VelocityTemplateEngine());

    get("/heroes/:id", (request, response) -> {
      HashMap<String, Object> model = new HashMap<String, Object>();
      Heros myHero = Heros.find(Integer.parseInt(request.params(":id")));
      model.put("myHero", myHero);
      model.put("template", "templates/hero.vtl");
      return new ModelAndView(model, layout);
    }, new VelocityTemplateEngine());

    get("/squads/new", (request, response) -> {
      Map<String, Object> model = new HashMap<String, Object>();
      model.put("template", "templates/squadform.vtl");
      return new ModelAndView(model, layout);
    }, new VelocityTemplateEngine());

    post("/squads", (request, response) -> {
      Map<String, Object> model = new HashMap<String, Object>();
      String name = request.queryParams("name");
      Squad newSquad = new Squad(name);
      model.put("template", "templates/squadsuccess.vtl");
      return new ModelAndView(model, layout);
    }, new VelocityTemplateEngine());

    get("/squads", (request, response) -> {
      Map<String, Object> model = new HashMap<String, Object>();
      model.put("squads", Squad.all());
      model.put("template", "templates/squads.vtl");
      return new ModelAndView(model, layout);
    }, new VelocityTemplateEngine());

    get("/squads/:id", (request, response) -> {
      Map<String, Object> model = new HashMap<String, Object>();
      Squad mySquad = Squad.find(Integer.parseInt(request.params(":id")));
      model.put("mySquad", mySquad);
      model.put("template", "templates/mySquad.vtl");
      return new ModelAndView(model, layout);
    }, new VelocityTemplateEngine());

    get("squads/:id/heroes/new", (request, response) -> {
      Map<String, Object> model = new HashMap<String, Object>();
      Squad mySquad = Squad.find(Integer.parseInt(request.params(":id")));
      model.put("mySquad", mySquad);
      model.put("template", "templates/squadsinHeros.vtl");
      return new ModelAndView(model, layout);
    }, new VelocityTemplateEngine());

    post("/heroes", (request, response) -> {
      Map<String, Object> model = new HashMap<String, Object>();

      Squad mySquad = Squad.find(Integer.parseInt(request.queryParams("mySquadId")));

      String description = request.queryParams("name");
      Heros myHero = new Heros(description);

      mySquad.addHero(myHero);

      model.put("mySquad", mySquad);
      model.put("template", "templates/savedsuccess.vtl");
      return new ModelAndView(model, layout);
    }, new VelocityTemplateEngine());

    ProcessBuilder process = new ProcessBuilder();
     Integer port;
     if (process.environment().get("PORT") != null) {
         port = Integer.parseInt(process.environment().get("PORT"));
     } else {
         port = 4567;
     }

setPort(port);

    // get("/hero", (request, response) -> {
    //   Map<String, Object> model = new HashMap<String, Object>();
    //   model.put("heroes", request.session().attribute("heroes"));
    //   model.put("template", "templates/hero.vtl");
    //   return new ModelAndView(model, layout);
    // }, new VelocityTemplateEngine());
  }
}
